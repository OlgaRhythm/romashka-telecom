package com.romashka.romashka_telecom.brt.service.impl;

import com.romashka.romashka_telecom.brt.entity.Call;
import com.romashka.romashka_telecom.brt.entity.Caller;
import com.romashka.romashka_telecom.brt.model.BillingMessage;
import com.romashka.romashka_telecom.brt.model.CdrRecord;
import com.romashka.romashka_telecom.brt.enums.NetworkType;
import com.romashka.romashka_telecom.brt.repository.CallRepository;
import com.romashka.romashka_telecom.brt.repository.CallerRepository;
import com.romashka.romashka_telecom.brt.repository.CallerResourceRepository;
import com.romashka.romashka_telecom.brt.service.BillingService;
import com.romashka.romashka_telecom.brt.service.CdrDataFilter;
import com.romashka.romashka_telecom.brt.service.CdrDataProcessorService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;
import java.util.concurrent.ConcurrentHashMap;

/**
 * –ü–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –º–æ–¥–µ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class CdrDataProcessorServiceImpl implements CdrDataProcessorService {

    private final Integer DELAY_HOURS = 12;

    private final BillingService billingService;
    private final CdrDataFilter filterService;
    private final CallerRepository callerRepo;
    private final CallRepository callRepo;
    private final CallerResourceRepository callerResourceRepository;

    /** –ø–æ—Å–ª–µ–¥–Ω–∏–π ¬´–º–æ–¥–µ–ª—å–Ω—ã–π¬ª –º–æ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –º—ã –≤–∏–¥–µ–ª–∏ */
    private volatile LocalDateTime lastModelTime;
    /** –∑–∞ –∫–∞–∫–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å —É–∂–µ —Å–ø–∏—Å–∞–ª–∏ */
    private volatile LocalDate lastBillingDate;
    private volatile boolean billingStarted = false;

    private final Map<LocalDate, List<CdrRecord>> callsByDate = new ConcurrentHashMap<>();
    private final Set<LocalDate> processedDates = ConcurrentHashMap.newKeySet();

    @Transactional
    @Override
    public void process(List<CdrRecord> records) {
        // 1) –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        List<CdrRecord> filtered = filterService.filter(records);
        if (filtered.isEmpty()) {
            log.info("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π CDR –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏");
            return;
        }

        // 2‚Äì5) –ú–∞–ø–∏–º, —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –ª–æ–≥–∏—Ä—É–µ–º
        List<Call> callsToSave = mapAndCollectCalls(filtered);
        callRepo.saveAll(callsToSave);
        log.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {} –∑–≤–æ–Ω–∫–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É calls", callsToSave.size());

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–≤–æ–Ω–∫–∞
        filtered.forEach(record -> {
            LocalDate date = record.getEndTime().toLocalDate();
            log.debug("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –¥–∞—Ç—É: {}", date);
            callsByDate.computeIfAbsent(date, k -> new ArrayList<>()).add(record);
        });

        // 6) –û–±–Ω–æ–≤–ª—è–µ–º modelTime
        LocalDateTime maxModel = filtered.stream()
                .map(CdrRecord::getEndTime)
                .max(LocalDateTime::compareTo)
                .orElse(lastModelTime != null ? lastModelTime : LocalDateTime.now());
        lastModelTime = maxModel;

        // –ü–æ—Ç–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∞—Ä–∏—Ñ–æ–≤
        if (!billingStarted) {
            // === –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª ===
            initBilling(maxModel);
        } else {
            // === –Ω–µ –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª ===
            updateBilling(maxModel);
        }
    }

    // ---------------------------------------------------
    // –®–∞–≥–∏ 2‚Äì4: —Å–æ–±—Ä–∞—Ç—å –∑–≤–æ–Ω–∫–∏ –≤ —Å—É—â–Ω–æ—Å—Ç–∏ Call
    // ---------------------------------------------------
    private List<Call> mapAndCollectCalls(List<CdrRecord> filtered) {
        Set<String> callerNums = filtered.stream()
                .map(CdrRecord::getCallerNumber).collect(Collectors.toSet());

        Map<String, Caller> callerByNumber = callerRepo
                .findAllByNumberIn(new ArrayList<>(callerNums))
                .stream()
                .collect(Collectors.toMap(Caller::getNumber, c -> c));

        return filtered.stream()
                .map(rec -> mapRecordToCall(rec, callerByNumber))
                .flatMap(Optional::stream)
                .collect(Collectors.toList());
    }

    private Optional<Call> mapRecordToCall(CdrRecord rec, Map<String, Caller> byNumber) {
        Caller caller = byNumber.get(rec.getCallerNumber());
        if (caller == null) {
            log.warn("–ù–µ –Ω–∞—à–ª–∏ –≤ –ë–î –∞–±–æ–Ω–µ–Ω—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º {}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å",
                    rec.getCallerNumber());
            return Optional.empty();
        }
        Call call = new Call();
        call.setCallerId(caller.getCallerId());
        call.setCallType(rec.getCallType());
        call.setContactNumber(rec.getContactNumber());
        call.setStartTime(rec.getStartTime());
        call.setEndTime(rec.getEndTime());
        return Optional.of(call);
    }

    // ---------------------------------------------------
    // –®–∞–≥ 6.1: –ø–µ—Ä–≤–∏—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏–ª–ª–∏–Ω–≥–∞
    // ---------------------------------------------------
    private void initBilling(LocalDateTime maxModel) {
        billingStarted  = true;
        lastModelTime   = maxModel;

        // –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
        LocalDate minDate = callsByDate.keySet().stream()
                .min(LocalDate::compareTo)
                .orElse(maxModel.toLocalDate());

        // –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –Ω–µ –ø–ª–∞—Ç–∏–ª–∏ ‚Äî –¥–µ–Ω—å –¥–æ maxModel
        lastBillingDate = minDate.minusDays(1); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ –¥–µ–Ω—å –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –¥–Ω—ë–º –¥–∞–Ω–Ω—ã—Ö
    }

    // ---------------------------------------------------
    // –®–∞–≥ 6.2: –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
    // ---------------------------------------------------
    private void updateBilling(LocalDateTime maxModel) {
        // –ë–µ—Ä–µ—Ç—Å—è –Ω–∞ –¥–µ–Ω—å –º–µ–Ω—å—à–µ
        LocalDate target = maxModel.toLocalDate().minusDays(1);

        for (LocalDate day = lastBillingDate.plusDays(1);
             !day.isAfter(target);
             day = day.plusDays(1)) {

            // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º lastBillingDate, –¥–∞–∂–µ –µ—Å–ª–∏ –¥–µ–Ω—å –ø—É—Å—Ç–æ–π
            lastBillingDate = day;

            if (hasUnprocessedCalls(day)) {
                processCallsForDate(day);
                // –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—ã–∑–æ–≤ chargeMonthlyFee –≤–Ω—É—Ç—Ä—å —É—Å–ª–æ–≤–∏—è
                billingService.chargeMonthlyFee(day);
            }
        }
        lastModelTime = maxModel;
    }

    private void executeBilling(LocalDate billingDate) {

        for (LocalDate day = lastBillingDate.plusDays(1); !day.isAfter(billingDate); day = day.plusDays(1)) {
            log.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ billingDate={}, targetDate={}", billingDate, day);
            if (hasUnprocessedCalls(day)) {
                processCallsForDate(day);
            }
            billingService.chargeMonthlyFee(day);
            lastBillingDate = day;
        }

        processedDates.add(billingDate);
        lastModelTime = billingDate.atStartOfDay().plusHours(DELAY_HOURS); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
    }

    private void processCallsForDate(LocalDate date) {
        log.info("üü¢ –ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ –∑–∞ {}", date);

        List<CdrRecord> calls = callsByDate.getOrDefault(date, Collections.emptyList());
        if (calls.isEmpty()) return;

        log.info("üìä –í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞ {}: {}", date, calls.size());

        // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏)
        calls.forEach(call -> {
            long durationMinutes = Duration.between(call.getStartTime(), call.getEndTime()).toMinutes();

            // –ü–æ–ª—É—á–∞–µ–º callerId –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–æ–º–µ—Ä—É
            Caller caller = callerRepo.findByNumber(call.getCallerNumber())
                .orElseThrow(() -> new RuntimeException("Caller not found: " + call.getCallerNumber()));

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –∞–±–æ–Ω–µ–Ω—Ç–æ–º –†–æ–º–∞—à–∫–∏
            boolean isInternalCall = callerRepo.findByNumber(call.getContactNumber()).isPresent();
            NetworkType networkType = isInternalCall ? NetworkType.INTERNAL : NetworkType.EXTERNAL;

            // 1) —Å–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            Map<String, Double> resources = new HashMap<>();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∞–±–æ–Ω–µ–Ω—Ç–∞
            resources.put("money", caller.getBalance().doubleValue());
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
            callerResourceRepository.findByCallerId(caller.getCallerId())
                    .forEach(cr -> resources.put(
                            cr.getResourceId().getResourceName(),
                            cr.getCurrentBalance().doubleValue()
                    ));

            BillingMessage msg = BillingMessage.builder()
                    .callerId(caller.getCallerId())
                    .rateId(caller.getRateId())
                    .durationMinutes(durationMinutes)
                    .callType(call.getCallType())
                    .networkType(networkType)
                    .resources(resources)
                    .build();

            log.info("üöÄ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±–∏–ª–ª–∏–Ω–≥–∞: {}", msg);

            // 2) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            billingService.processAndSendBillingData(msg);

            // –∏ –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –ª–æ–≥–∏—Ä—É–µ–º
            log.info("üìû –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–∏–ª–ª–∏–Ω–≥ –¥–ª—è –∑–≤–æ–Ω–∫–∞: {}", msg);
        });

        processedDates.add(date); // –ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
        log.info("üîµ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–≤–æ–Ω–∫–æ–≤ –∑–∞ {}: {}", date, calls.size());
    log.debug("üìå –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –∑–∞ {}:\n{}",
        date,
        calls.stream()
            .map(c -> "‚ñ∏ " + c.getCallerNumber() + " ‚Üí " + c.getContactNumber())
            .collect(Collectors.joining("\n"))
    );
    }

    private boolean hasUnprocessedCalls(LocalDate date) {
        return callsByDate.containsKey(date) && !processedDates.contains(date);
    }
}
